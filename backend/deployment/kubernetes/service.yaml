apiVersion: v1
kind: Service
metadata:
  name: heatguard-api-service
  namespace: heatguard
  labels:
    app.kubernetes.io/name: heatguard-api
    app.kubernetes.io/component: service
    app.kubernetes.io/version: "1.0.0"
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-path: "/api/v1/health"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-protocol: "http"
    prometheus.io/scrape: "true"
    prometheus.io/port: "8000"
    prometheus.io/path: "/api/v1/metrics"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8000
    targetPort: http
    protocol: TCP
  selector:
    app.kubernetes.io/name: heatguard-api
  sessionAffinity: None

---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: heatguard
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: service
    app.kubernetes.io/version: "7.0"
spec:
  type: ClusterIP
  ports:
  - name: redis
    port: 6379
    targetPort: redis
    protocol: TCP
  selector:
    app.kubernetes.io/name: redis
  sessionAffinity: None

---
# Headless service for StatefulSet (if using Redis cluster)
apiVersion: v1
kind: Service
metadata:
  name: redis-headless
  namespace: heatguard
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: headless-service
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: redis
    port: 6379
    targetPort: redis
    protocol: TCP
  selector:
    app.kubernetes.io/name: redis

---
# Load Balancer Service (for external access)
apiVersion: v1
kind: Service
metadata:
  name: heatguard-api-lb
  namespace: heatguard
  labels:
    app.kubernetes.io/name: heatguard-api
    app.kubernetes.io/component: load-balancer
    app.kubernetes.io/version: "1.0.0"
  annotations:
    # AWS Load Balancer annotations
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-path: "/api/v1/health"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-protocol: "http"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-interval-seconds: "30"
    service.beta.kubernetes.io/aws-load-balancer-healthy-threshold-count: "2"
    service.beta.kubernetes.io/aws-load-balancer-unhealthy-threshold-count: "3"

    # GCP Load Balancer annotations
    cloud.google.com/neg: '{"ingress": true}'
    cloud.google.com/backend-config: '{"default": "heatguard-backend-config"}'

    # Azure Load Balancer annotations
    service.beta.kubernetes.io/azure-load-balancer-internal: "false"
spec:
  type: LoadBalancer
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  - name: https
    port: 443
    targetPort: http
    protocol: TCP
  selector:
    app.kubernetes.io/name: heatguard-api
  loadBalancerSourceRanges:
  # Add your allowed IP ranges here
  - 0.0.0.0/0  # Allow all (change for production)
  externalTrafficPolicy: Local

---
# Service Monitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: heatguard-api-monitor
  namespace: heatguard
  labels:
    app.kubernetes.io/name: heatguard-api
    app.kubernetes.io/component: monitoring
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: heatguard-api
  endpoints:
  - port: http
    path: /api/v1/metrics
    interval: 30s
    scrapeTimeout: 10s
    honorLabels: true
  namespaceSelector:
    matchNames:
    - heatguard

---
# Network Policy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: heatguard-network-policy
  namespace: heatguard
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: heatguard-api
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - namespaceSelector:
        matchLabels:
          name: monitoring
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: heatguard-api
    ports:
    - protocol: TCP
      port: 8000
  egress:
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: redis
    ports:
    - protocol: TCP
      port: 6379
  - to: []  # Allow all outbound (DNS, external APIs)
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443