apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: heatguard-api-ingress
  namespace: heatguard
  labels:
    app.kubernetes.io/name: heatguard-api
    app.kubernetes.io/component: ingress
    app.kubernetes.io/version: "1.0.0"
  annotations:
    # Nginx Ingress Controller annotations
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "30"

    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit-rpm: "300"
    nginx.ingress.kubernetes.io/rate-limit-connections: "10"

    # CORS configuration
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://dashboard.heatguard.com, https://app.heatguard.com"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,X-API-Key,Authorization"
    nginx.ingress.kubernetes.io/cors-expose-headers: "Content-Length,Content-Range,X-Process-Time,X-API-Version"
    nginx.ingress.kubernetes.io/cors-max-age: "1728000"

    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-Frame-Options: DENY";
      more_set_headers "X-XSS-Protection: 1; mode=block";
      more_set_headers "Referrer-Policy: strict-origin-when-cross-origin";
      more_set_headers "Content-Security-Policy: default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline';";
      more_set_headers "Strict-Transport-Security: max-age=31536000; includeSubDomains; preload";

    # Let's Encrypt / cert-manager annotations
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    cert-manager.io/acme-challenge-type: "http01"

    # AWS ALB annotations (alternative to nginx)
    # kubernetes.io/ingress.class: "alb"
    # alb.ingress.kubernetes.io/scheme: "internet-facing"
    # alb.ingress.kubernetes.io/target-type: "ip"
    # alb.ingress.kubernetes.io/backend-protocol: "HTTP"
    # alb.ingress.kubernetes.io/healthcheck-path: "/api/v1/health"
    # alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
    # alb.ingress.kubernetes.io/ssl-redirect: "443"

    # Monitoring
    nginx.ingress.kubernetes.io/server-snippet: |
      location /nginx_status {
        stub_status on;
        access_log off;
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        deny all;
      }

spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - api.heatguard.com
    - heatguard-api.company.com
    secretName: heatguard-tls
  rules:
  - host: api.heatguard.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: heatguard-api-service
            port:
              number: 8000
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: heatguard-api-service
            port:
              number: 8000
      - path: /docs
        pathType: Prefix
        backend:
          service:
            name: heatguard-api-service
            port:
              number: 8000
      - path: /health
        pathType: Exact
        backend:
          service:
            name: heatguard-api-service
            port:
              number: 8000
  - host: heatguard-api.company.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: heatguard-api-service
            port:
              number: 8000

---
# Ingress for monitoring endpoints (internal only)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: heatguard-monitoring-ingress
  namespace: heatguard
  labels:
    app.kubernetes.io/name: heatguard-api
    app.kubernetes.io/component: monitoring-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/whitelist-source-range: "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      access_log off;
spec:
  rules:
  - host: monitoring.heatguard.internal
    http:
      paths:
      - path: /metrics
        pathType: Prefix
        backend:
          service:
            name: heatguard-api-service
            port:
              number: 8000
      - path: /health
        pathType: Prefix
        backend:
          service:
            name: heatguard-api-service
            port:
              number: 8000

---
# Certificate for TLS
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: heatguard-cert
  namespace: heatguard
spec:
  secretName: heatguard-tls
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
  dnsNames:
  - api.heatguard.com
  - heatguard-api.company.com

---
# ClusterIssuer for Let's Encrypt (needs to be created once per cluster)
# apiVersion: cert-manager.io/v1
# kind: ClusterIssuer
# metadata:
#   name: letsencrypt-prod
# spec:
#   acme:
#     server: https://acme-v02.api.letsencrypt.org/directory
#     email: admin@heatguard.com
#     privateKeySecretRef:
#       name: letsencrypt-prod
#     solvers:
#     - http01:
#         ingress:
#           class: nginx

---
# BackendConfig for GCP (if using GKE with GCP Load Balancer)
apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  name: heatguard-backend-config
  namespace: heatguard
spec:
  healthCheck:
    checkIntervalSec: 30
    timeoutSec: 10
    healthyThreshold: 2
    unhealthyThreshold: 3
    type: HTTP
    requestPath: /api/v1/health
    port: 8000
  connectionDraining:
    drainingTimeoutSec: 60
  timeoutSec: 30
  logging:
    enable: true
    sampleRate: 1.0