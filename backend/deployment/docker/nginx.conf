# Nginx configuration for HeatGuard API
# Provides load balancing, SSL termination, and reverse proxy functionality

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging configuration
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    log_format api_access '$remote_addr - $remote_user [$time_local] '
                         '"$request" $status $body_bytes_sent '
                         '"$http_referer" "$http_user_agent" '
                         'rt=$request_time ut="$upstream_response_time" '
                         'cs=$upstream_cache_status';

    access_log /var/log/nginx/access.log api_access;
    error_log /var/log/nginx/error.log warn;

    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 10M;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_types
        application/json
        application/javascript
        text/css
        text/javascript
        text/xml
        application/xml
        application/xml+rss;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=100r/m;
    limit_req_zone $binary_remote_addr zone=burst:10m rate=20r/s;

    # Upstream configuration for HeatGuard API
    upstream heatguard_api {
        least_conn;
        server heatguard-api:8000 max_fails=3 fail_timeout=30s;
        # Add more backend servers for production load balancing:
        # server heatguard-api-2:8000 max_fails=3 fail_timeout=30s;
        # server heatguard-api-3:8000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # HTTP to HTTPS redirect
    server {
        listen 80;
        server_name _;

        # Health check endpoint (allow HTTP)
        location /health {
            proxy_pass http://heatguard_api/api/v1/health;
            access_log off;
        }

        # Redirect all other traffic to HTTPS
        location / {
            return 301 https://$server_name$request_uri;
        }
    }

    # Main HTTPS server configuration
    server {
        listen 443 ssl http2;
        server_name api.heatguard.com localhost;

        # SSL Configuration
        ssl_certificate /etc/nginx/ssl/fullchain.pem;
        ssl_certificate_key /etc/nginx/ssl/privkey.pem;

        # SSL Security Settings
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        # Security headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-Frame-Options DENY always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline';" always;

        # API Routes
        location /api/ {
            # Rate limiting
            limit_req zone=api burst=20 nodelay;
            limit_req zone=burst burst=50 nodelay;

            # Proxy configuration
            proxy_pass http://heatguard_api;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;

            # Timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;

            # Buffering
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            proxy_busy_buffers_size 8k;

            # Cache headers for API responses
            proxy_hide_header Cache-Control;
            add_header Cache-Control "no-cache, no-store, must-revalidate" always;
        }

        # Health check endpoint (no rate limiting)
        location /health {
            proxy_pass http://heatguard_api/api/v1/health;
            access_log off;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # API documentation (development only)
        location /docs {
            proxy_pass http://heatguard_api/docs;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Static files (if any)
        location /static/ {
            alias /usr/share/nginx/html/static/;
            expires 1y;
            add_header Cache-Control "public, immutable";
        }

        # Root endpoint
        location = / {
            proxy_pass http://heatguard_api/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Handle 404 errors
        error_page 404 /404.html;
        location = /404.html {
            internal;
            return 404 '{"error": "Not Found", "message": "The requested resource was not found"}';
            add_header Content-Type application/json always;
        }

        # Handle 50x errors
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            internal;
            return 500 '{"error": "Internal Server Error", "message": "The server encountered an internal error"}';
            add_header Content-Type application/json always;
        }
    }

    # Monitoring endpoints server (internal)
    server {
        listen 8080;
        server_name localhost;
        access_log off;

        # Nginx status for monitoring
        location /nginx_status {
            stub_status on;
            allow 127.0.0.1;
            allow 172.20.0.0/16;  # Docker network
            deny all;
        }

        # Health check for load balancer
        location /nginx_health {
            return 200 '{"status": "healthy", "service": "nginx"}';
            add_header Content-Type application/json;
        }
    }
}