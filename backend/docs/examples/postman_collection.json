{
  "info": {
    "name": "HeatGuard Predictive Safety System API",
    "description": "Complete Postman collection for testing all HeatGuard API endpoints. This collection includes examples for single predictions, batch processing, async operations, and error handling scenarios.",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "apikey",
    "apikey": [
      {
        "key": "key",
        "value": "X-API-Key",
        "type": "string"
      },
      {
        "key": "value",
        "value": "{{api_key}}",
        "type": "string"
      },
      {
        "key": "in",
        "value": "header",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "base_url",
      "value": "https://api.heatguard.com",
      "type": "string",
      "description": "Base URL for HeatGuard API"
    },
    {
      "key": "api_key",
      "value": "your-api-key-here",
      "type": "string",
      "description": "Your HeatGuard API key"
    },
    {
      "key": "job_id",
      "value": "",
      "type": "string",
      "description": "Job ID from async batch operations"
    }
  ],
  "item": [
    {
      "name": "Health & System",
      "description": "Endpoints for checking system health and getting information",
      "item": [
        {
          "name": "Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has status field\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "});",
                  "",
                  "pm.test(\"API is healthy\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql('healthy');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/health",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "health"]
            },
            "description": "Check the health status of the HeatGuard API"
          },
          "response": [
            {
              "name": "Healthy Response",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/api/v1/health",
                  "host": ["{{base_url}}"],
                  "path": ["api", "v1", "health"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"status\": \"healthy\",\n  \"service\": \"HeatGuard Predictive Safety System\",\n  \"version\": \"1.0.0\",\n  \"timestamp\": \"2024-01-01T12:00:00Z\",\n  \"uptime_seconds\": 86400,\n  \"model_status\": \"loaded\",\n  \"dependencies\": {\n    \"redis\": \"connected\",\n    \"model\": \"ready\"\n  }\n}"
            }
          ]
        },
        {
          "name": "System Information",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains system info\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('system');",
                  "    pm.expect(jsonData).to.have.property('model');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/info",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "info"]
            },
            "description": "Get detailed system information including model status and configuration"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Single Predictions",
      "description": "Individual worker risk predictions",
      "item": [
        {
          "name": "Single Prediction - Complete Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains prediction data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('risk_level');",
                  "    pm.expect(jsonData).to.have.property('heat_exposure_risk_score');",
                  "    pm.expect(jsonData).to.have.property('osha_recommendations');",
                  "});",
                  "",
                  "pm.test(\"Risk score is within valid range\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.heat_exposure_risk_score).to.be.at.least(0);",
                  "    pm.expect(jsonData.heat_exposure_risk_score).to.be.at.most(1);",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"worker_id\": \"postman_test_001\",\n    \"Age\": 30,\n    \"Gender\": 1,\n    \"Temperature\": 32.5,\n    \"Humidity\": 75.0,\n    \"hrv_mean_hr\": 85.0,\n    \"hrv_mean_nni\": 706.0,\n    \"hrv_rmssd\": 25.5,\n    \"hrv_sdnn\": 45.2\n  },\n  \"options\": {\n    \"use_conservative\": true,\n    \"log_compliance\": true\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/predict",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "predict"]
            },
            "description": "Single worker prediction with complete biometric data"
          },
          "response": []
        },
        {
          "name": "Single Prediction - Minimal Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Prediction works with minimal data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('risk_level');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"Age\": 45,\n    \"Gender\": 0,\n    \"Temperature\": 28.0,\n    \"Humidity\": 65.0,\n    \"hrv_mean_hr\": 78.0\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/predict",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "predict"]
            },
            "description": "Single prediction with only required fields"
          },
          "response": []
        },
        {
          "name": "Single Prediction - High Risk Scenario",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"High risk scenario detected\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.requires_immediate_attention).to.eql(true);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"worker_id\": \"high_risk_test\",\n    \"Age\": 50,\n    \"Gender\": 1,\n    \"Temperature\": 40.0,\n    \"Humidity\": 90.0,\n    \"hrv_mean_hr\": 120.0,\n    \"hrv_mean_nni\": 500.0\n  },\n  \"options\": {\n    \"use_conservative\": true,\n    \"log_compliance\": true\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/predict",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "predict"]
            },
            "description": "Test with high-risk environmental and biometric conditions"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Batch Predictions",
      "description": "Multiple worker predictions in a single request",
      "item": [
        {
          "name": "Batch Prediction - Small Batch",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Batch response structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('batch_size');",
                  "    pm.expect(jsonData).to.have.property('predictions');",
                  "    pm.expect(jsonData).to.have.property('batch_statistics');",
                  "});",
                  "",
                  "pm.test(\"All predictions processed successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.successful_predictions).to.eql(jsonData.batch_size);",
                  "    pm.expect(jsonData.failed_predictions).to.eql(0);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": [\n    {\n      \"worker_id\": \"batch_worker_001\",\n      \"Age\": 30,\n      \"Gender\": 1,\n      \"Temperature\": 32.5,\n      \"Humidity\": 75.0,\n      \"hrv_mean_hr\": 85.0\n    },\n    {\n      \"worker_id\": \"batch_worker_002\",\n      \"Age\": 45,\n      \"Gender\": 0,\n      \"Temperature\": 28.0,\n      \"Humidity\": 65.0,\n      \"hrv_mean_hr\": 78.0\n    },\n    {\n      \"worker_id\": \"batch_worker_003\",\n      \"Age\": 35,\n      \"Gender\": 1,\n      \"Temperature\": 35.0,\n      \"Humidity\": 80.0,\n      \"hrv_mean_hr\": 95.0\n    }\n  ],\n  \"options\": {\n    \"use_conservative\": true,\n    \"log_compliance\": true\n  },\n  \"parallel_processing\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/predict_batch",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "predict_batch"]
            },
            "description": "Batch prediction for 3 workers with different risk profiles"
          },
          "response": []
        },
        {
          "name": "Batch Prediction - Mixed Risk Levels",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Risk distribution statistics present\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.batch_statistics).to.have.property('risk_distribution');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": [\n    {\n      \"worker_id\": \"safe_worker\",\n      \"Age\": 25,\n      \"Gender\": 0,\n      \"Temperature\": 22.0,\n      \"Humidity\": 50.0,\n      \"hrv_mean_hr\": 70.0\n    },\n    {\n      \"worker_id\": \"caution_worker\",\n      \"Age\": 40,\n      \"Gender\": 1,\n      \"Temperature\": 30.0,\n      \"Humidity\": 70.0,\n      \"hrv_mean_hr\": 85.0\n    },\n    {\n      \"worker_id\": \"warning_worker\",\n      \"Age\": 50,\n      \"Gender\": 1,\n      \"Temperature\": 36.0,\n      \"Humidity\": 85.0,\n      \"hrv_mean_hr\": 105.0\n    },\n    {\n      \"worker_id\": \"danger_worker\",\n      \"Age\": 55,\n      \"Gender\": 1,\n      \"Temperature\": 42.0,\n      \"Humidity\": 95.0,\n      \"hrv_mean_hr\": 125.0\n    }\n  ],\n  \"options\": {\n    \"use_conservative\": true,\n    \"log_compliance\": true\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/predict_batch",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "predict_batch"]
            },
            "description": "Batch with workers representing all risk levels"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Async Batch Processing",
      "description": "Asynchronous processing for large batches",
      "item": [
        {
          "name": "Submit Async Batch",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Job ID returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('job_id');",
                  "    pm.globals.set('job_id', jsonData.job_id);",
                  "});",
                  "",
                  "pm.test(\"Job status is submitted\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql('submitted');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": [\n    {\n      \"worker_id\": \"async_001\",\n      \"Age\": 30,\n      \"Gender\": 1,\n      \"Temperature\": 32.0,\n      \"Humidity\": 75.0,\n      \"hrv_mean_hr\": 85.0\n    },\n    {\n      \"worker_id\": \"async_002\",\n      \"Age\": 25,\n      \"Gender\": 0,\n      \"Temperature\": 29.0,\n      \"Humidity\": 70.0,\n      \"hrv_mean_hr\": 82.0\n    },\n    {\n      \"worker_id\": \"async_003\",\n      \"Age\": 40,\n      \"Gender\": 1,\n      \"Temperature\": 35.0,\n      \"Humidity\": 80.0,\n      \"hrv_mean_hr\": 90.0\n    }\n  ],\n  \"options\": {\n    \"use_conservative\": true,\n    \"log_compliance\": true\n  },\n  \"chunk_size\": 100,\n  \"priority\": \"normal\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/predict_batch_async",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "predict_batch_async"]
            },
            "description": "Submit a batch for asynchronous processing"
          },
          "response": []
        },
        {
          "name": "Check Job Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Job status information present\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('job_id');",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/batch_status/{{job_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "batch_status", "{{job_id}}"]
            },
            "description": "Check the status of an async batch job"
          },
          "response": []
        },
        {
          "name": "Get Job Results",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 404\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Results contain predictions\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('results');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/batch_results/{{job_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "batch_results", "{{job_id}}"]
            },
            "description": "Retrieve results of completed async batch job"
          },
          "response": []
        },
        {
          "name": "List Batch Jobs",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Jobs list returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('jobs');",
                  "    pm.expect(jsonData).to.have.property('total_count');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/batch_jobs?limit=10",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "batch_jobs"],
              "query": [
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            },
            "description": "List recent batch processing jobs"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Test Data Generation",
      "description": "Generate test data for development and testing",
      "item": [
        {
          "name": "Generate Random Data - Mixed Risk",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Generated data is array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Generated correct number of records\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.length).to.eql(5);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/generate_random?count=5&risk_profile=mixed",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "generate_random"],
              "query": [
                {
                  "key": "count",
                  "value": "5"
                },
                {
                  "key": "risk_profile",
                  "value": "mixed"
                }
              ]
            },
            "description": "Generate 5 test records with mixed risk profiles"
          },
          "response": []
        },
        {
          "name": "Generate Safe Profile Data",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/generate_random?count=3&risk_profile=safe",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "generate_random"],
              "query": [
                {
                  "key": "count",
                  "value": "3"
                },
                {
                  "key": "risk_profile",
                  "value": "safe"
                }
              ]
            },
            "description": "Generate test data with safe risk profile"
          },
          "response": []
        },
        {
          "name": "Generate High Risk Data",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/generate_random?count=2&risk_profile=high",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "generate_random"],
              "query": [
                {
                  "key": "count",
                  "value": "2"
                },
                {
                  "key": "risk_profile",
                  "value": "high"
                }
              ]
            },
            "description": "Generate test data with high risk profile"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Error Scenarios",
      "description": "Test error handling and validation",
      "item": [
        {
          "name": "Invalid API Key",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Error message contains authentication info\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.include('Invalid');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "X-API-Key"
                },
                {
                  "key": "value",
                  "value": "invalid-api-key"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"Age\": 30,\n    \"Gender\": 1,\n    \"Temperature\": 32.0,\n    \"Humidity\": 75.0,\n    \"hrv_mean_hr\": 85.0\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/predict",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "predict"]
            },
            "description": "Test response when using invalid API key"
          },
          "response": []
        },
        {
          "name": "Missing Required Fields",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 422\", function () {",
                  "    pm.response.to.have.status(422);",
                  "});",
                  "",
                  "pm.test(\"Validation error details provided\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('detail');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"Age\": 30\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/predict",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "predict"]
            },
            "description": "Test validation error when required fields are missing"
          },
          "response": []
        },
        {
          "name": "Out of Range Values",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 422\", function () {",
                  "    pm.response.to.have.status(422);",
                  "});",
                  "",
                  "pm.test(\"Range validation error\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.detail).to.include('validation');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"Age\": 150,\n    \"Gender\": 1,\n    \"Temperature\": 100,\n    \"Humidity\": 75.0,\n    \"hrv_mean_hr\": 85.0\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/predict",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "predict"]
            },
            "description": "Test validation with out-of-range values"
          },
          "response": []
        },
        {
          "name": "Empty Batch Request",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 422\", function () {",
                  "    pm.response.to.have.status(422);",
                  "});",
                  "",
                  "pm.test(\"Empty batch error\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.detail).to.include('min_items');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": []\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/predict_batch",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "predict_batch"]
            },
            "description": "Test batch request with empty data array"
          },
          "response": []
        },
        {
          "name": "Invalid Job ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Job not found error\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.detail).to.include('Job not found');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/batch_status/invalid-job-id-12345",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "batch_status", "invalid-job-id-12345"]
            },
            "description": "Test response when checking status of non-existent job"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Performance Tests",
      "description": "Test API performance characteristics",
      "item": [
        {
          "name": "Response Time Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(200);",
                  "});",
                  "",
                  "pm.test(\"Processing time header present\", function () {",
                  "    pm.expect(pm.response.headers.get('X-Process-Time')).to.exist;",
                  "});",
                  "",
                  "pm.test(\"API version header present\", function () {",
                  "    pm.expect(pm.response.headers.get('X-API-Version')).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": {\n    \"Age\": 30,\n    \"Gender\": 1,\n    \"Temperature\": 32.0,\n    \"Humidity\": 75.0,\n    \"hrv_mean_hr\": 85.0\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/predict",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "predict"]
            },
            "description": "Test API response time performance"
          },
          "response": []
        },
        {
          "name": "Batch Performance Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Batch processing time acceptable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test(\"Processing time per prediction reasonable\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    var avgProcessingTime = jsonData.processing_time_ms / jsonData.batch_size;",
                  "    pm.expect(avgProcessingTime).to.be.below(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"data\": [\n    {\"Age\": 25, \"Gender\": 0, \"Temperature\": 22.0, \"Humidity\": 50.0, \"hrv_mean_hr\": 70.0},\n    {\"Age\": 30, \"Gender\": 1, \"Temperature\": 28.0, \"Humidity\": 60.0, \"hrv_mean_hr\": 75.0},\n    {\"Age\": 35, \"Gender\": 0, \"Temperature\": 32.0, \"Humidity\": 70.0, \"hrv_mean_hr\": 80.0},\n    {\"Age\": 40, \"Gender\": 1, \"Temperature\": 35.0, \"Humidity\": 80.0, \"hrv_mean_hr\": 85.0},\n    {\"Age\": 45, \"Gender\": 0, \"Temperature\": 38.0, \"Humidity\": 85.0, \"hrv_mean_hr\": 90.0},\n    {\"Age\": 50, \"Gender\": 1, \"Temperature\": 30.0, \"Humidity\": 65.0, \"hrv_mean_hr\": 95.0},\n    {\"Age\": 28, \"Gender\": 0, \"Temperature\": 26.0, \"Humidity\": 55.0, \"hrv_mean_hr\": 72.0},\n    {\"Age\": 33, \"Gender\": 1, \"Temperature\": 33.0, \"Humidity\": 75.0, \"hrv_mean_hr\": 88.0},\n    {\"Age\": 38, \"Gender\": 0, \"Temperature\": 36.0, \"Humidity\": 82.0, \"hrv_mean_hr\": 92.0},\n    {\"Age\": 42, \"Gender\": 1, \"Temperature\": 29.0, \"Humidity\": 68.0, \"hrv_mean_hr\": 78.0}\n  ],\n  \"parallel_processing\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/predict_batch",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "predict_batch"]
            },
            "description": "Test batch processing performance with 10 workers"
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set timestamp for unique worker IDs",
          "pm.globals.set('timestamp', Date.now());"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test to check response format",
          "pm.test('Response is JSON', function() {",
          "    pm.response.to.be.json;",
          "});",
          "",
          "// Log response time for monitoring",
          "console.log(`Request: ${pm.info.requestName} - Response Time: ${pm.response.responseTime}ms`);"
        ]
      }
    }
  ]
}